//#include helpers.oajs
// Health potion will be used at this threshold
POTION_HEAL = 25;

types = {
	healingPotion: {
		type: 0x0F0E,
		color: 0x0031,
		cooldown: 5000,
	}
}

lootLists = [
	"loot",
	"gems",
	"reagents",
	"items",
	"use"
]
useList = "use"
loot_bag = 'backpack'

displayTimerSize = [200, 10]
abilities = {
	// Warrior
	"absorb": {
		"command": ".Brave3",
		"cooldown": 260,
		"duration": 35,
		"position": [700, 350]
	},
	"strength": {
		"command": ".Brave1",
		"cooldown": 130,
		"duration": 65,
		"position": [700, 300],
	},
	"hpboost": {
		"command": ".Brave4",
		"cooldown": 70,
		"duration": 30,
		"position": [700, 250],
	},
	"reflection": {
		"command": ".Brave5",
		"cooldown": 70,
		"duration": 8,
		"position": [700, 200],
	},
	"chains": {
		"command": ".infchain",
		"cooldown": 50,
		"duration": 0,
		"position": [500, 200],
	},
	"attackspeed": {
		"command": ".Attack2",
		"cooldown": 90,
		"duration": 30,
		"position": [500, 350],
	},
	"damage": {
		"command": ".Attack1",
		"cooldown": 90,
		"duration": 20,
		"position": [500, 300],
	},
	"roar": {
		"command": ".Roar",
		"cooldown": 55,
		"duration": 0,
		"position": [500, 250],
	},
	// Paladin
	"Defence": {
		"command": ".Defence1",
		"cooldown": 120,
		"duration": 100,
		"position": [1250, 650]
	},
	"SpeedAttack": {
		"command": ".Combat1",
		"cooldown": 240,
		"duration": 120,
		"position": [1250, 600],
	},
	"SpeedCast": {
		"command": ".Combat2",
		"cooldown": 240,
		"duration": 120,
		"position": [1250, 550],
	},
	"MaxDPS": {
		"command": ".Combat3",
		"cooldown": 240,
		"duration": 120,
		"position": [1250, 500],
	},
	"MaxDex": {
		"command": ".Magic1",
		"cooldown": 100,
		"duration": 15,
		"position": [1250, 450],
	},
	"NPCPain": {
		"command": ".Magic2",
		"cooldown": 140,
		"duration": 80,
		"position": [1250, 400],
	},
	"Chuma": {
		"command": ".Magic3",
		"cooldown": 140,
		"duration": 80,
		"position": [1250, 350],
	},
	"Chain": {
		"command": ".InfChain",
		"cooldown": 40,
		"duration": 0,
		"position": [1250, 300],
	}
}

// Kill existing processes and spawn new ones
function Autostart() {
	functions = [
		"AutoHealSelf",
		"panicHeal",
		"exp_counter",
	]

	functions.forEach(function (script) {
		Orion.Terminate(script);
		Orion.Exec(script);
	})
}
//
function attack() {
	target = Orion.TargetSystemSerial();
	overheadPrint("Attacking!", "OK", target)
	Orion.Attack(Orion.TargetSystemSerial());
}

function panicHeal() {
	while (true) {
		if (!Player.Dead()) {
			// If we have some potions - proceed
			potionCount = Orion.Count(types["healingPotion"]["type"], types["healingPotion"]["color"])
			if (potionCount > 0) {
				if (Player.Hits() < (Player.MaxHits() - (Player.MaxHits() / 100 * POTION_HEAL))) {
					// Warn if 10 or less potions were found
					if (potionCount <= 10) {
						overheadPrint("There is !! " + potionCount + " !! heal potions left", "WARNING")
					}
					// Use potion
					overheadPrint("Should use healpot!", "INFO")
					potion = Orion.FindType(types.healingPotion.type, types.healingPotion.color);
					if (potion.length > 0) {
						Orion.UseType(types.healingPotion.type, types.healingPotion.color);
						overheadPrint("Used healpot!", "OK")
						Orion.Wait(types.healingPotion.cooldown);
					}
				}
			} else {
				// if no potions are present - let's wait, maybe we can get some from loot
				if (Orion.Count(types.healingPotion.type, types.healingPotion.color) < 1) {
					overheadPrint("No more potions left, waiting for 1 more minute", "ERROR")
					for (i = 0; i <= 60; i++) {
						Orion.Print("Waiting for potion...");
						Orion.Wait(1000);
					}
				}
			}
		}
		Orion.Wait(100);
	}
}
// Autoheal
function AutoHealSelf() {
	while (true) {
		if (!Player.Dead()) {
			while (Player.Hits() < (Player.MaxHits() - 10)) {
				if (Orion.Count(0x0E21) > 0) {
					Orion.BandageSelf();
					Orion.Wait(500);
					Orion.WaitJournal("Вылечено|interrupted|Не удалось|Вы положили", Orion.Now(), Orion.Now() + 10000);
					Orion.Wait(1000);
				}
				else
					Orion.Print('33', ' No more bandage left ! ');
				Orion.Wait(500);
			}
			Orion.Wait(500);
		}
		Orion.Wait(500);
	}
}

// Attack NewTargetSystem target
function AttackNextMob() {
	var _target = Orion.TargetSystemSerial();
	var _name = Orion.FindObject(_target).Name()
	if (_target && _name && _name != "Bear spirit") {
		Orion.WarMode(true);
		Orion.CharPrint(self, 1153, ">>" + _name);
		Orion.Wait(200);
		Orion.Attack(_target);
	}

}

function use_ability(name) {
	colorGreen = "#4dff00ff"
	colorRed = "#fc0320ff"

	if (!abilities.hasOwnProperty(name)) {
		Orion.Print("Ability >> " + name + " << not found");
		return;
	}

	ability = abilities[name];
	Orion.Say(ability["command"]);

	if (!Orion.DisplayTimerExists(name)) {

		Orion.CancelTarget();
		Orion.CancelWaitTarget();

		Orion.AddDisplayTimer(
			name,
			ability["cooldown"] * 1000,
			'custom',
			'LineBar',
			'>> ' + name + ' <<',
			ability["position"][0],
			ability["position"][1],
			'any',
			colorGreen
		);
		if (!ability.hasOwnProperty("duration")) {
			ability["duration"] = ability["cooldown"];
		}

		durationPercents = Math.round((100 * ability["duration"]) / ability["cooldown"])

		Orion.Print("Duration percents: " + durationPercents);
		Orion.DisplayTimerSetColorStage(name, 100 - durationPercents, 'any', colorRed);
		Orion.DisplayTimerSetSize(name, displayTimerSize[0], displayTimerSize[1]);
	}

}


// Loot from container
function loot_from_container(container_serial) {
	loot = []
	Orion.UseObject(container_serial);
	Orion.Wait(300);

	lootLists.forEach(function (lootList) {
		// Orion.Print(" Found -> " + Orion.FindList(lootList, container_serial))
		// Orion.Print("Added " + lootList);
		Array.prototype.push.apply(loot, Orion.FindList(lootList, container_serial));
	})

	lootTotal = loot.length;
	cnt = 0;
	loot.forEach(function (item) {
		cnt++;
		Orion.Print("Looting " + cnt + " of " + lootTotal + " items");
		Orion.MoveItem(item, 0, loot_bag);
		Orion.Wait(600);
	});
}


function loot() {
	_bags = [
		0x0E75, // Backpack
	];
	var _counter = 0;
	var _corpses = Orion.FindType(0x2006, 0xFFFF, ground);
	if (_corpses.length) {
		_corpses.forEach(function (_corpse) {
			_counter++;
			Orion.Print("10", "Corpse " + _counter + "/" + _corpses.length);
			loot_from_container(_corpse);
			Orion.Wait(300);
			_bags.forEach(function (_bag) {
				var _bags_in_corpse = Orion.FindType(_bag, 0xFFFF, _corpse)
				if (_bags_in_corpse.length) {
					_bags_in_corpse.forEach(function (_bag_in_corpse) {
						loot_from_container(_bag_in_corpse);
						Orion.Wait(300);
					});
				}
			});
		});

		toUse = Orion.FindList(useList, 'backpack');
		if (toUse.length) {
			Orion.Print("Found " + toUse.length + " items to use");
			toUse.forEach(function (item) {
				Orion.UseObject(item);
				Orion.Wait(1000)
			});
		}
	}
}

function exp_counter() {
	// Вы получили {int} единиц опыта
	var _started = new Date().getTime();
	var _total_exp = 0;
	while (true) {
		if (Orion.InJournal("MakeReset")) {
			_started = new Date().getTime();
			_total_exp = 0;
			Orion.ClearJournal("MakeReset");
			Orion.Print("Опыт сброшен");
		}
		var _message = Orion.WaitJournal("Вы получили", Orion.Now(), Orion.Now() + 10000);
		if (_message) {
			var _message_text = _message.Text();
			var _exp_match = /Вы получили (\d+)/.exec(_message_text);
			if (_exp_match && _exp_match.length)
				_total_exp += parseInt(_exp_match[1]);

			var _minutes = ((new Date().getTime() - _started) / 1000) / 60;
			var _exp_per_minute = (_total_exp / _minutes).toFixed(2);
			Orion.Print("Минут -> " + _minutes.toFixed(0));
			Orion.Print("0x0035", "Опыта в минуту: +" + _exp_per_minute + ", всего: +" + _total_exp);
		}

		Orion.Wait(200);
	}
}

function testProps() {
	obj = Orion.FindObject(0x40002365)
	Orion.Print(obj.Properties())
}
